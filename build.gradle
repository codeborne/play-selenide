apply plugin: 'java'
apply plugin: "jacoco"

sourceCompatibility = 1.7
compileJava.options.debugOptions.debugLevel = "source,lines,vars"

buildDir = "$PLAY_APP/build"

defaultTasks 'clean', 'test'

sourceSets {
  main {
    java {srcDir "$PLAY_APP/app"}
    resources {srcDirs "$PLAY_APP/app", "$PLAY_APP/public/javascripts"}
  }
  test {
    java {srcDir "$PLAY_APP/test"}
    resources {srcDir "$PLAY_APP/test"}
  }
}

dependencies {
  compile fileTree(dir: "$PLAY_APP/lib", include: '*.jar')
}

def _resolveModule(module) {
  return module.isDirectory() ? module : new File(module.text.trim()).getCanonicalFile();
}

def addModules() {
  println "Play app: $PLAY_APP"
  println "Play home: $PLAY_HOME"
  _addModules(PLAY_APP)
}

def _addModules(appDirectory) {
  def modules = new File(appDirectory, 'modules').listFiles()

  modules.each {File module ->
    module = _resolveModule(module)

    sourceSets['main']['java']['srcDirs'] += new File(module, "app");
    sourceSets['main']['resources']['srcDirs'] += new File(module, "app");
    sourceSets['main']['resources']['srcDirs'] += new File(module, "public/javascripts");

    File test = new File(module, "test")
    def isModuleWithBrokenTests = module.name.matches("guice.*");

    if (test.exists() && !isModuleWithBrokenTests) {
      sourceSets['test']['java']['srcDirs'] += test;
      sourceSets['test']['resources']['srcDirs'] += test;
    }
    _addToClasspath("$module/lib")
    if (module.isDirectory()) {
      _addModules(module)
    }
  }
}

def addPlayToClasspath() {
  _addToClasspath("$PLAY_HOME/framework/lib")
  _addToClasspath("$PLAY_HOME/framework")
}

def _addToClasspath(dir) {
  def lib = fileTree(dir: dir, include: '*.jar')
  sourceSets['main']['compileClasspath'] += lib
  sourceSets['test']['compileClasspath'] += lib
  sourceSets['test']['runtimeClasspath'] += lib
}

task showClasspath << {
  println "CLASSPATH:"
  sourceSets['main']['compileClasspath'].each { println it }
}

addModules()
addPlayToClasspath()

task copyTestClassesToPlayPrecompiled(type: Copy, dependsOn: 'testClasses') {
  from project.sourceSets.test.output.classesDir
  into "$PLAY_APP/precompiled/java"
  include 'itest/**'
  include 'ui/**'
  outputs.upToDateWhen { false }
}

jacoco {
  toolVersion = "0.7.0.201403182114"
}

repositories {
  mavenCentral()
}

test {
  exclude 'ui/**'
  exclude 'integration/**'
  exclude 'itest/**'
  jacoco {
    append = false
    enabled = project.hasProperty('TEST_COVERAGE_ENABLED') && TEST_COVERAGE_ENABLED.toBoolean()
  }
}

task itest(type: Test, dependsOn: 'copyTestClassesToPlayPrecompiled') {
  include 'itest/**'
  jacoco {
    enabled = false
  }
}

task uitest(type: Test, dependsOn: 'copyTestClassesToPlayPrecompiled') {
  if (project.hasProperty('UITEST_CLASS')) {
    include UITEST_CLASS
  }
  else {
    include 'ui/**'
  }

  maxHeapSize = "256m"

  systemProperties['browser'] = 'chrome'
  if (System.getenv()['BROWSER']) {
    systemProperties['browser'] = System.getenv()['BROWSER']
  }

  systemProperties['selenide.timeout'] = '8000'
  systemProperties['precompiled'] = 'true'
  systemProperties['BUILD_URL'] = System.getenv()['BUILD_URL']

  jacoco {
    enabled = false
  }

  if (project.hasProperty('THREADS')) {
    maxParallelForks = THREADS.toInteger()
  }
  else {
    maxParallelForks = 2
  }
}

task uitestWithCoverage(type: Test) {
  if (project.hasProperty('UITEST_CLASS')) {
    include UITEST_CLASS
  }
  else {
    include 'ui/**'
  }

  maxHeapSize = "256m"
  systemProperties['browser'] = 'chrome'
  systemProperties['selenide.timeout'] = '8000'
  systemProperties['BUILD_URL'] = System.getenv()['BUILD_URL']
  systemProperties['jacoco.enabled'] = 'true'
  systemProperties['jacoco.destfile'] = "${buildDir}/jacoco/uitest.exec"
  systemProperties['jacoco.excludes'] = "util.geoip.*"

  jacoco {
    enabled = false
  }
}

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.enabled true
    html.destination "${buildDir}/reports/jacoco"
  }
}

tasks.withType(Test).all { testTask ->
  testTask.jvmArgs += ['-ea', '-noverify', '-XX:MaxPermSize=128m']
  testTask.systemProperties['file.encoding'] = 'UTF-8'
  testTask.testLogging.showStandardStreams = true
  testTask.workingDir = PLAY_APP
  testTask.outputs.upToDateWhen { false }
}
