apply plugin: 'java'
apply plugin: 'jacoco'

compileJava {
  options.debugOptions.debugLevel = "source,lines,vars"
  options.fork = true
  options.forkOptions.setMemoryMaximumSize("4g")
}

buildDir = "$PLAY_APP/build"

defaultTasks 'clean', 'test'

sourceSets {
  main {
    java {srcDir "$PLAY_APP/app"}
    resources {srcDirs "$PLAY_APP/conf", "$PLAY_APP/app", "$PLAY_APP/public/javascripts"}
  }
  test {
    java {srcDir "$PLAY_APP/test"}
    java {srcDir "$PLAY_APP/test-ui"}
    resources {srcDir "$PLAY_APP/test"}
    resources {srcDir "$PLAY_APP/test-ui"}
  }
}

dependencies {
  compile fileTree(dir: "$PLAY_APP/lib", include: '*.jar')
}

def _resolveModule(module) {
  return module.isDirectory() ? module : new File(module.text.trim()).getCanonicalFile();
}

def addModules() {
  println "Play app: $PLAY_APP"
  println "Play home: $PLAY_HOME"
  _addModules(PLAY_APP)
}

def _addModules(appDirectory) {
  def modules = new File(appDirectory, 'modules').listFiles()

  modules.each {File module ->
    module = _resolveModule(module)

    sourceSets['main']['java']['srcDirs'] += new File(module, "app");
    sourceSets['main']['resources']['srcDirs'] += new File(module, "app");
    sourceSets['main']['resources']['srcDirs'] += new File(module, "public/javascripts");

    File test = new File(module, "test")
    File uiTest = new File(module, "test-ui")

    if (uiTest.exists()) {
      sourceSets['test']['java']['srcDirs'] += test;
      sourceSets['test']['java']['srcDirs'] += uiTest;
      sourceSets['test']['resources']['srcDirs'] += test;
      sourceSets['test']['resources']['srcDirs'] += uiTest;
    }

    _addToClasspath("$module/lib")
    if (module.isDirectory()) {
      _addModules(module)
    }
  }
}

def addPlayToClasspath() {
  _addToClasspath("$PLAY_HOME/framework/lib")
  _addToClasspath("$PLAY_HOME/framework")
}

def _addToClasspath(dir) {
  def lib = fileTree(dir: dir, include: '*.jar')
  sourceSets['main']['compileClasspath'] += lib
  sourceSets['test']['compileClasspath'] += lib
  sourceSets['test']['runtimeClasspath'] += lib
}

def showCompileClasspath() {
  println "Compile classpath:"
  sourceSets['main']['compileClasspath'].each { println it }
}

def showRuntimeClasspath() {
  println "Runtime classpath:"
  sourceSets['main']['runtimeClasspath'].each { println it }
}

addModules()
addPlayToClasspath()
showRuntimeClasspath()

jacoco {
  toolVersion = "0.7.7.201606060606"
}

repositories {
  mavenCentral()
}

buildscript {
  repositories { jcenter() }
  dependencies { classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10' }
}

apply plugin: 'info.solidsoft.pitest'

def packages = {
  // for unknown reason, pitest throws "No mutations found" exception when "services*" is included
  return new File("$PLAY_APP/app").list()*.concat("*") - 'services*'
}

//packages().each { println it}

pitest {
  targetClasses = packages()
  timestampedReports = false
  threads = 4
  outputFormats = ['XML', 'HTML']
  enableDefaultIncrementalAnalysis = true
}

test {
  exclude 'ui/**'
  exclude 'integration/**'
  exclude 'itest/**'
  jacoco {
    append = false
    enabled = project.hasProperty('TEST_COVERAGE_ENABLED') && TEST_COVERAGE_ENABLED.toBoolean()
  }
  jvmArgs "-XX:+HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=tmp"
}

task itest(type: Test) {
  include 'itest/**'
  jacoco {
    enabled = false
  }
}

task uitest(type: Test) {
  if (project.hasProperty('UITEST_CLASS')) {
    include UITEST_CLASS
  }
  else {
    include 'ui/**'
  }

  maxHeapSize = "512m"
  jvmArgs '-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=tmp'

  systemProperties['browser'] = 'chrome'
  if (System.getenv()['BROWSER']) {
    systemProperties['browser'] = System.getenv()['BROWSER']
  }

  systemProperties['selenide.timeout'] = '8000'
  systemProperties['precompiled'] = 'true'
  systemProperties['BUILD_URL'] = System.getenv()['BUILD_URL']
//  systemProperties['log4j.debug'] = 'true'

  jacoco {
    enabled = false
  }

  if (project.hasProperty('THREADS')) {
    maxParallelForks = THREADS.toInteger()
  }
  else {
    maxParallelForks = 1
  }
}

task uitestWithCoverage(type: Test) {
  if (project.hasProperty('UITEST_CLASS')) {
    include UITEST_CLASS
  }
  else {
    include 'ui/**'
  }

  maxHeapSize = "512m"
  systemProperties['browser'] = 'chrome'
  systemProperties['selenide.timeout'] = '8000'
  systemProperties['BUILD_URL'] = System.getenv()['BUILD_URL']
  systemProperties['jacoco.enabled'] = 'true'
  systemProperties['jacoco.executionData'] = "$PLAY_APP/build/jacoco/uitest.exec"
  systemProperties['jacoco.report'] = "$PLAY_APP/build/reports/jacoco"
  systemProperties['jacoco.excludes'] = "lib."
  systemProperties['jacoco.sources'] = sourceSets['main']['java']['srcDirs']

  jacoco {
    enabled = false
  }
}

task(combineUiTestResults, type: JavaExec) {
  main = 'play.test.coverage.ActionCoveragePlugin'
  classpath = sourceSets.test.runtimeClasspath
  systemProperty 'file.encoding', 'UTF-8'
  workingDir "$PLAY_APP"
}

tasks.withType(Test).all { testTask ->
  testTask.jvmArgs += ['-ea', '-noverify']
  testTask.systemProperties['file.encoding'] = 'UTF-8'
  testTask.systemProperties['java.net.preferIPv4Stack'] = 'true'
  testTask.systemProperties['application.path'] = System.getProperty("application.path", ".")
  testTask.workingDir = "$PLAY_APP"
  testTask.outputs.upToDateWhen { false }
}
